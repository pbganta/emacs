* init files and set paths 
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")

(use-package cl-lib
  :ensure t
  :init)

(defun sanityinc/add-subdirs-to-load-path (parent-dir)
  "Add every non-hidden subdir of PARENT-DIR to `load-path'."
  (let ((default-directory parent-dir))
    (setq load-path
          (append
           (cl-remove-if-not
            #'file-directory-p
            (directory-files (expand-file-name parent-dir) t "^[^\\.]"))
           load-path))))
#+END_SRC

* interface tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)   ;; No startup page
  (setq initial-scratch-message nil) ;; No *scratch* buffer message
  (global-hl-line-mode t)           ;; provides highlighted line at cursor position
  (menu-bar-mode 0)                 ;; No menubar
  (tool-bar-mode 0)                 ;; No toolbar
  (tooltip-mode  0)                 ;; No tooltip
  (scroll-bar-mode 0)                ;; Noe scrollbar
  (blink-cursor-mode 1)              ;; No blinking cursor
  (setq pop-up-windows nil)         ;; No popup windows
  (show-paren-mode 1)                ;; Shows paranthesis
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq x-select-enable-clipboard t)
  (setq confirm-kill-emacs 'y-or-n-p)
  (setq ring-bell-function 'ignore)
  (setq visible-bell 1)
  (setq visual-line-mode t)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (defalias 'list-buffers 'ibuffer)
  (setq mouse-drag-copy-region t)   ;; copies text selected by mouse
  (setq package-check-signature nil)
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
  (setq show-trailing-whitespace 1)
  (setq electric-indent-mode t)
  ;; (setq electric-pair-mode t) # pairing video 
  (setq-default cursor-type 'box)
  (set-cursor-color "#ff0000")
  ;; (setq frame-title-format "%b <%f>")
  (setq auto-save-default nil)
  (setq create-lockfiles nil)
  (setq column-number-mode t)
  (delete-selection-mode 1)  ;; make typing delete/overwrites selected text
  (desktop-save-mode 1)
  (when (fboundp 'winner-mode)
    (winner-mode 1))
  (show-paren-mode 1)
  (setq show-paren-style 'parenthesis)
  ;; customize tab indent
  (setq tab-always-indent 'complete)
  (setq-default indent-tabs-mode nil) ;; set default indent as not tab
  (setq-default tab-width 2)
  (setq indent-line-function 'insert-tab)
  (add-to-list 'completion-styles 'initials t)
  ;; for C-u C-SPC command. Just hit space after
  (setq-default set-mark-command-repeat-pop t)
  (setq exec-path (append exec-path '("/home/gpb/.emacs.d/.cache/lsp/npm/yaml-language-server/lib/node_modules/yaml-language-server/bin" "/home/gpb/.nvm/versions/node/v22.10.0/bin/" "/home/gpb/.local/bin" "/home/gpb/.local/bin" "/home/gpb/.local/bin" "/usr/sbin" "/usr/bin" "/sbin" "/bin" "/usr/games" "/usr/local/games" "/snap/bin" "/snap/bin")))

#+END_SRC

* set and unset keys
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-z"))
;;  (global-set-key (kbd "C-<") 'previous-buffer)
;;  (global-set-key (kbd "C->") 'next-buffer)
  (global-set-key (kbd "C-c d") 'duplicate-line)
  ;; transpose stuff
  (global-set-key (kbd "C-S-t") 'transpose-lines)
  #+END_SRC 

* create backup files
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/mybackupfiles/")))
  (setq backup-by-copying t)
  (setq delete-old-versions t
        kept-new-versions 6
        kept-old-versions 6
        version-control t)
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/myundofiles/")))
#+END_SRC

* trypackage
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

* which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :commands (which-key-mode)
    :init
    (which-key-mode))
#+END_SRC

* shift change window function
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (setq aw-keys '(?1 ?2 ?3 ?4 ?5 ?6 ?7 ?8 ?9)
          aw-char-position 'top-left
          aw-ignore-current nil
          aw-leading-char-style 'char
          aw-scope 'frame)
    (setq aw-background nil)
    :bind (("M-o" . ace-window)
           ("M-O" . ace-swap-window)))
#+END_SRC

* counsel ivy swiper
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))

  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC

* company (another Autocomplete mode)
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0.5)
    (setq company-minimum-prefix-length 3)
    (global-company-mode t))

  (use-package company-terraform
    :ensure t
    :config
    (setq company-idle-delay 0.5)
    (setq company-minimum-prefix-length 3)
    (company-terraform-init))
#+END_SRC

* C and C++ related 
#+BEGIN_SRC emacs-lisp

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (use-package company-irony
    :ensure t
    :config
    (add-to-list 'company-backends 'company-irony))

  (use-package irony-eldoc
    :ensure t
    :config
    (add-hook 'irony-mode-hook #'irony-eldoc))
#+END_SRC

* avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-word-0))
#+END_SRC

* color-theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :config (load-theme 'zenburn t))
#+END_SRC

* flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode 1)
    (setq flycheck-shellcheck-follow-sources nil))
#+END_SRC

* Eglot - emacs client for language server protocol; similar to lsp-mode
#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :ensure t
    :hook (((c-mode c++-mode python-ts-mode) . eglot-ensure))
    :bind (:map eglot-mode-map
                ("C-c e d" . eldoc)
                ("C-c e a" . eglot-code-actions)
                ("C-c e f" . flymake-show-buffer-diagnostics)
                ("C-c e r" . eglot-rename)))

  ;; (with-eval-after-load 'eglot
  ;; (add-to-list 'eglot-server-programs
  ;;              '(yaml-mode . ("/home/gpb/.emacs.d/.cache/lsp/npm/yaml-language-server/lib/node_modules/yaml-language-server/bin/yaml-language-server" "--stdio"))
  ;;              '(yaml-ts-mode . ("/home/gpb/.emacs.d/.cache/lsp/npm/yaml-language-server/lib/node_modules/yaml-language-server/bin/yaml-language-server" "--stdio"))))
#+END_SRC

* Eldoc
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :ensure t
    :hook (((prog-mode) . eldoc-mode))
    :config
    (setq eldoc-message-function #'message))
#+END_SRC

* treesit-auto
#+BEGIN_SRC emacs-lisp
  (use-package treesit-auto
    :ensure t
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
  ;; the package treesit-fold is manually cloned from git clone https://github.com/emacs-tree-sitter/treesit-fold /path/to/lib
  ;; (add-to-list 'load-path "/home/gpb/.emacs.d/treesit-fold/")
  ;; (require 'treesit-fold)
  ;; (global-set-key (kbd "C-c C-SPC")  'treesit-fold-toggle)
  ;; (treesit-fold-mode 1)
#+END_SRC

* Python
#+BEGIN_SRC emacs-lisp
  (setq py-python-command "python3")
  (setq python-shell-interpreter "python3")

  (add-to-list 'major-mode-remap-alist
               '(c-mode . c-ts-mode)
               '(python-mode . python-ts-mode))

  (use-package python
    :ensure t
    :bind (:map python-ts-mode-map
                ("<f5>" . recompile)
                ("<f6>" . eglot-format))
    :hook ((python-ts-mode . eglot-ensure)
           (python-ts-mode . company-mode))
    :mode (("\\.py\\'" . python-ts-mode)))
#+END_SRC

* yassnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/elpa/yasnippet-snippets-1.1/snippets/"
                             "~/.emacs.d/snippets"))
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t)

#+END_SRC

* undo tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+END_SRC

* LSP-mode - emacs client for language server protocol; similar to eglot
#+BEGIN_SRC emacs-lisp
  (setq lsp-keymap-prefix "C-c l")

  (use-package lsp-mode
    :ensure t
    :config
    (setq lsp-keymap-prefix "C-c l")  
    (setq lsp-semantic-tokens-enable t)
    (setq lsp-semantic-tokens-honor-refresh-requests t)
    (setq lsp-signature-doc-lines 5)
    (setq lsp-idle-delay 0.5)
    (setq lsp-prefer-capf t)
    (setq lsp-keep-workspace-alive nil)
    :hook ((terraform-mode . lsp-deferred)
           (yaml-mode . lsp-deferred)
           (yaml-ts-mode . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ivy
    :requires (lsp-mode ivy)
    :commands (lsp-ivy-workspace-symbol lsp-ivy-global-workspace-symbol))

  (use-package lsp-ui 
    :ensure t
    :commands lsp-ui-mode)
  (setq lsp-ui-doc-enable t)
  (setq lsp-ui-doc-position 'at-point)
  (setq lsp-ui-doc-show-with-cursor nil)
  (setq lsp-ui-doc-show-with-mouse t)

  (use-package lsp-treemacs
    :ensure t
    :commands lsp-treemacs-errors-list)

  (use-package dap-mode
    :ensure t)

 (setq lsp-enable-links t)
 (setq lsp-terraform-ls-enable-show-reference t)

  ;; (with-eval-after-load 'lsp-mode
  ;;   (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration))

#+END_SRC

* Terraform mode; dependent on lsp-mode; 
#+BEGIN_SRC emacs-lisp
  (use-package terraform-mode
    :ensure t
    :custom (terraform-indent-level 4)
    :config
    (defun my-terraform-mode-init ()
    (setq lsp-disabled-clients '(tfls))      ;; (outline-minor-mode 1)
    (setq lsp-terraform-ls-prefill-required-fields t)
    (setq lsp-terraform-ls-validate-on-save t)
    (setq lsp-terraform-ls-enable-show-reference t)
    (setq lsp-terraform-ls-validate-on-save t)
      )
    (add-hook 'terraform-mode-hook 'my-terraform-mode-init))
#+END_SRC

*  German Holidays
#+BEGIN_SRC emacs-lisp
  (use-package german-holidays
    :ensure t)
#+END_SRC

* Org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :pin org
    :custom (org-modules '(org-habit)))

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (custom-set-variables
   '(org-directory "~/Documents/Personal/orgfiles/")
   '(org-default-notes-file (concat org-directory "/notes.org")))

  ;;  (global-set-key (kbd "C-c l") #'org-store-link) this we replaced to use lsp-mode C-c l
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)

  (setq org-agenda-start-on-weekday nil)

  (setq org-agenda-files (list "~/Documents/Personal/orgfiles/todo.org"
                               "~/Documents/Personal/orgfiles/appointments.org"
                               "~/Documents/Personal/orgfiles/diary.org"))

  (global-set-key (kbd "C-c i") 
                  (lambda () (interactive) (find-file "~/Documents/Personal/orgfiles/i.org")))

  (global-set-key (kbd "C-c s") 
                  (lambda () (interactive) (find-file "~/Documents/Personal/orgfiles/softwares_cheatsheet.org")))
#+END_SRC

* Org additional setup
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("a" "Appointment" entry (file  "~/Documents/Personal/orgfiles/appointments.org" )
           "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
          ("t" "To Do Item" entry (file+headline "~/Documents/Personal/orgfiles/todo.org" "To Do and Notes")
           "* TODO %?\n%u" :prepend t)
          ("n" "Note" entry (file+headline "~/Documents/Personal/orgfiles/notes.org" "Notes")
           "* %u %? " :prepend t)
          ("j" "Journal" entry (file+datetree "~/Documents/Personal/orgfiles/journal.org")
           "* %?" )
          ))

  (setq org-agenda-custom-commands
        '(("v" "My Agenda View"
           ((tags "personal+now"
                  ((org-agenda-overriding-header "personal:now")))
            (tags "jobsearch"
                  ((org-agenda-overriding-header "Job Search")))
            (tags "skillup"
                  ((org-agenda-overriding-header "Skillup")))
            (tags "appoint"
                  ((org-agenda-overriding-header "Appointments")))
            (agenda ""
                    ((org-agenda-span 1)
                     (org-agenda-overriding-header "Today Agenda")
                     (org-deadline-warning-days 3)))
            (agenda ""
                    ((org-agenda-start-day "+1d")
                     (org-agenda-overriding-header "Next 10 days")
                     (org-agenda-span 10)))
            (agenda "" ((org-agenda-overriding-header "Overdue")
                        (org-agenda-time-grid nil)
                        (org-agenda-start-on-weekday nil)
                        (org-agenda-show-all-dates nil)
                        (org-agenda-format-date "")  ;; Skip the date
                        (org-agenda-span 1)
                        (org-scheduled-past-days 999)
                        (org-deadline-past-days 999)
                        (org-deadline-warning-days 2)))
            (tags "later"
                  ((org-agenda-overriding-header "later")))
            (tags "future"
                  ((org-agenda-overriding-header "future")))
            (alltodo "")))))

  ;; ;  diary related setup
  (setq org-agenda-include-diary t)
  (setq calendar-holidays holiday-german-BW-holidays)
  (setq diary-file "~/Documents/Personal/orgfiles/diary.org")
  (setq appt-activate t)
  (setq diary-show-holidays-flag t)

#+END_SRC
* Programming
#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :ensure t
    :disabled
    :config
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                  (ggtags-mode-1)))))
#+END_SRC

* Dumb jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config
    :disabled
    :init
    (dumb-jump-mode)
    :ensure)
#+END_SRC

* IBUFFER
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))
                 ("magit" (mode . magit-mode))
                 ("IRC" (or (mode . circe-channel-mode) (mode . circe-server-mode)))
                 ("web" (or (mode . web-mode) (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                 ("mu4e"  (or (mode . mu4e-compose-mode) (name . "\*mu4e\*")))
                 ("programming" (or (mode . python-mode) (mode . python-ts-mode) (mode . c++-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))
  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)
#+END_SRC

* Latex
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :defer t
    :ensure auctex
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (setq LaTeX-indent-level 4)
                                          ;(setq TeX-PDF-mode t)
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex))
#+END_SRC

* company-latex
#+BEGIN_SRC emacs-lisp
  (use-package company-math
    :ensure t
    :config
    :init
    (add-hook 'LaTeX-mode-hook (lambda ()
                                 (add-to-list 'company-backends 'company-math-symbols-latex)
                                 (add-to-list 'company-backends 'company-latex-commands))))

  ;; (use-package company-auctex
  ;; :ensure t
  ;; :config
  ;; (company-auctex-init))

#+END_SRC

* bindings
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'tex
    '(progn
       (defun save-compile-latex ()
         "Save and compile latex document"
         (interactive)
         (save-buffer)
         (TeX-command-sequence t t))
       (defun complete-if-no-space ()
         (interactive)
         (let ((cb (string (char-before))))
           (if (or (equal cb " ") (equal (point) (line-beginning-position)))
               (tab-to-tab-stop)
             (TeX-complete-symbol))))
       (add-hook 'LaTeX-mode-hook (lambda ()
                                    (define-key LaTeX-mode-map (kbd "<f5>") 'save-compile-latex)
                                    (define-key LaTeX-mode-map (kbd "<f7>") 'preview-clearout-buffer)
                                    (define-key LaTeX-mode-map (kbd "TAB") 'complete-if-no-space)
                                    (define-key LaTeX-mode-map (kbd "<tab>") 'complete-if-no-space)))))
#+END_SRC

* gnuplot
#+BEGIN_SRC emacs-lisp
  (use-package gnuplot-mode
    :ensure t
    :init)
  (add-hook 'gnuplot-mode-hook
            (lambda ()
              (flyspell-prog-mode)
              (add-hook 'before-save-hook
                        'whitespace-cleanup nil t)))
  (setq auto-mode-alist
        (append '(("\\.\\(gp\\|gnuplot\\)$" . gnuplot-mode)) auto-mode-alist))

  (autoload 'gnuplot-mode "gnuplot" "gnuplot major mode" t)
  (autoload 'gnuplot-make-buffer "gnuplot" "open a buffer in gnuplot-mode" t)
  (setq auto-mode-alist (append '(("\\.gp\\'" . gnuplot-mode))
                                auto-mode-alist))
#+END_SRC

* cp2k
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/not_elpa/")
  (require 'cp2k-mode nil 'noerror)
  (add-to-list 'auto-mode-alist '("\\.inp\\'" . cp2k-mode))
#+END_SRC

* VMD
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.vmd\\'" . tcl-mode))
#+END_SRC

* persistent-scratch
#+BEGIN_SRC emacs-lisp
  ;; persistent-scratch
  (use-package persistent-scratch
    :ensure t
    :config
    (persistent-scratch-setup-default))
#+END_SRC

* Bookmarks
#+BEGIN_SRC emacs-lisp
  (use-package bm
    :ensure t
    :disabled
    :init
    :bind (("<C-f2>" . bm-toggle)
           ("<f2>" . bm-next)
           ("<S-f2>" . bm-previous)))
#+END_SRC

* lammps
#+BEGIN_SRC emacs-lisp
  (use-package lammps-mode
    :ensure t
    :init
    (autoload 'lammps-mode "lammps-mode.el" "LAMMPS mode." t)
    (setq auto-mode-alist (append auto-mode-alist
                                  '(("\\.lmp\\'" . lammps-mode))
                                  '(("\\.lmpin\\'" . lammps-mode))
                                  )))
#+END_SRC

* treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :custom
    (treemacs-no-png-images t)
    (treemacs-width 24))
#+END_SRC

* pdf tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :defer t
    :magic ("%PDF" . pdf-view-mode)
    :hook (TeX-after-compilation-finished-hook . TeX-revert-document-buffer)
    :defines pdf-annot-activate-created-annotations
    :custom
    (pdf-view-display-size 'fit-page)
    ;; more fine-grained zooming
    (pdf-view-resize-factor 1.05)
    ;; create annotation on highlight
    (pdf-annot-activate-created-annotations t)
    :config
    (pdf-tools-install :no-query)
    :bind (:map pdf-view-mode-map
                ("C-s" . isearch-forward)
                ("C-r" . isearch-backward)))
#+END_SRC
* Magit and Git-Modes
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :defer t
    :pin melpa
    :bind ("C-x g" . magit-status))
  (setq magit-define-global-key-bindings 'recommended)

  (use-package git-modes
    :ensure t
    :defer t)
  (add-to-list 'auto-mode-alist '("\\.gitignore\\'" . gitconfig-mode))
#+END_SRC

* Docker mode
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :ensure t
    :defer t)

  (use-package dockerfile-mode
    :ensure t
    :defer t)
  (add-to-list 'auto-mode-alist '("\\.docker\\'" . dockerfile-mode))
#+END_SRC

* Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :defer t
    :hook (prog-mode-hook . rainbow-delimiters-mode))
#+END_SRC

* CSV-Mode
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :ensure t
    :defer t)
#+END_SRC

* HTMLIZE
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t
    :defer t)
#+END_SRC

* Kubernetes
#+BEGIN_SRC emacs-lisp
  (use-package kubernetes
    :ensure t
    :commands (kubernetes-overview)
    :config
    (setq kubernetes-poll-frequency 3600
          kubernetes-redraw-frequency 3600))
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t)
#+END_SRC

* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

* Kubed - to control via kubectl
#+BEGIN_SRC emacs-lisp
  (use-package kubed
    :ensure t
    :defer t)
#+END_SRC

* K8S documentation
#+BEGIN_SRC emacs-lisp
  (use-package kubedoc
    :ensure t
    :defer t)
#+END_SRC

* Py-Env
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv
    :ensure t
    :defer t)

  (setq pyvenv-post-activate-hooks
        (list (lambda ()
                (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))
  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3"))))
#+END_SRC

* Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :defer t
    :bind ("C-=" . er/expand-region))
#+END_SRC

* EWW setup
#+BEGIN_SRC emacs-lisp
  (use-package eww
    :ensure nil
    :config
    (setq eww-restore-desktop t)
    (setq eww-desktop-remove-duplicates t)
    (setq eww-header-line-format nil)
    (setq eww-search-prefix "https://duckduckgo.com/html/?q=")
    (setq eww-download-directory (expand-file-name "~/Documents/eww-downloads"))
    (setq eww-suggest-uris
          '(eww-links-at-point
            thing-at-point-url-at-point))
    (setq eww-bookmarks-directory (locate-user-emacs-file "eww-bookmarks/"))
    (setq eww-history-limit 5)
    (setq eww-browse-url-new-window-is-tab nil)
    (setq eww-retrieve-command nil))
;;    (setq browse-url-browser-function 'eww-browse-url))
#+END_SRC

* Elfeed 
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :custom
    (elfeed-db-directory
     (expand-file-name "elfeed" user-emacs-directory))
    (elfeed-show-entry-switch 'display-buffer)
    :bind
    ("C-x w" . elfeed))

  (setq elfeed-feeds 
        '(
          ;; work 
          ("https://devops.com/feed/" work devops)
          ("https://atlassian.com/blog/devops/feed/" work devops)
          ("https://docker.com/feed/" work docker)
          ("https://www.hashicorp.com/blog/products/terraform/feed.xml" work terraform)
          ("https://aws.amazon.com/blogs/aws-cost-management/feed/" work aws)
          ("https://aws.amazon.com/blogs/devops/feed/" work aws)
          ("https://aws.amazon.com/blogs/developer/feed/" work aws)
          ("https://bair.berkeley.edu/blog/feed.xml" work ai)
          ("https://towardsdatascience.com/feed/" work ai)
          ("https://aws.amazon.com/blogs/machine-learning/feed/" work ai)
          ;; emacs 
          ("http://pragmaticemacs.com/feed/" fun emacs)
          ("https://sachachua.com/blog/category/emacs/feed/index.xml" fun emacs)
          ;; english news           
          ("https://feeds.bbci.co.uk/news/rss.xml"  news)
          ("https://rss.dw.com/rdf/rss-en-all"  news)
          ;; telugu news 
          ("https://ntvtelugu.com/feed/" telugu news)
          ("https://www.greatandhra.com/ga_quickcms/xml/news_most_popular_latest.xml" telugu news)
          ;; german news 
          ("https://www.tagesschau.de/xml/rss2" german news)
          ("https://www.gala.de/feed/standard-rss/" german news)
          ("https://www.zdf.de/rss/zdf/nachrichten" german news)
          ("https://www.n-tv.de/leute/rss" german news)
          ("http://www.bild.de/rssfeeds/rss3-20745882,feed=alles.bild.html" german news)
          ;; german course 
          ("http://rss.dw-world.de/rdf/DKfeed_lgn_de" german study)
          ("http://rss.dw-world.de/rdf/DKfeed_topthemamitvokabeln_de" german study)
          ("http://rss.dw-world.de/rdf/DKfeed_wortderwoche_de" german study)
          ("http://rss.dw-world.de/rdf/DKfeed_alltagsdeutsch_de" german study)
          ("http://rss.dw-world.de/rdf/DKfeed_alltagsdeutsch_de" german study)
          ))
#+END_SRC 

* Yaml-Mode; 
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
      :ensure t
      :defer t)
  (setq auto-mode-alist
        (append '(("\\.\\(yaml\\|yml\\)$" . yaml-ts-mode)) auto-mode-alist))

  (use-package flycheck-yamllint
    :ensure t
    :defer t
    :init
    (progn
      (eval-after-load 'flycheck
        '(add-hook 'flycheck-mode-hook 'flycheck-yamllint-setup))))

#+END_SRC

* Smart Parenthesis
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (smartparens-global-mode nil)
    )
#+END_SRC

* documentation
#+BEGIN_SRC emacs-lisp
  ;; (use-package devdocs
  ;;   :ensure t)
  ;; (global-set-key (kbd "C-h D") 'devdocs-lookup)
#+END_SRC

* Helpful - more advanced help 
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :ensure t
  :defer t
  :bind (("C-h f" . helpful-function)
         ("C-h v" . helpful-variable)
         ("C-h s" . helpful-symbol)
         ("C-h k" . helpful-key)))
#+END_SRC

* exec path from shell
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
   :ensure t
   :init)
#+END_SRC


* Combulate - An advanced movement approach

* Misc customization
#+BEGIN_SRC emacs-lisp

  ; C-x C-x will not select text 
  (defun exchange-point-and-mark-no-activate ()
    "Identical to \\[exchange-point-and-mark] but will not activate the region."
    (interactive)
    (exchange-point-and-mark)
    (deactivate-mark nil))
  (define-key global-map [remap exchange-point-and-mark] 'exchange-point-and-mark-no-activate)

  ; C-u C-SPC not select text
  (defun jump-to-mark ()
    "Jumps to the local mark, respecting the `mark-ring' order.
    This is the same as using \\[set-mark-command] with the prefix argument."
    (interactive)
    (set-mark-command 1))

   ;; memory fix
  (setq gc-cons-percentage 0.5
     gc-cons-threshold (* 128 1024 1024))

  ;; transparent

(defun transparency (value)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nTransparency Value 0 - 100 opaque:")
  (set-frame-parameter (selected-frame) 'alpha value))
  (set-frame-parameter (selected-frame) 'alpha '90)
#+END_SRC
